#! /bin/sh
#
# Name: nfs-common 
# Date: 2003-06-27 15:20
# Author: MontaVista Software, Inc. <source@mvista.com>
# Copyright: Copyright 1999-2003 MontaVista Software, Inc.
# License: 2003 (c) MontaVista Software, Inc. This file is licensed
#          under the terms of the GNU General Public License version 2.
#          This program is licensed "as is" without any warranty of any
#          kind, whether express or implied.
#
# Copyright 2002, 2003, 2004 Sony Corporation
# Copyright 2002, 2003, 2004 Matsushita Electric Industrial Co., Ltd.
#
### BEGIN INIT INFO
# Required-Start: 
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: start/stop common NFS daemons
# Description: This shell script takes care of starting and stopping
#              common daemons required for NFS clients and servers.
### END INIT INFO 
# chkconfig: 2345 19 81

# Init script information
INIT_NAME=rpc
DESC="NFS common utilities"

# Individual Daemon information
DAEMON1=/usr/sbin/rpc.statd
ARGS1=""
BASENAME1=${DAEMON1##*.}
DAEMON2=/usr/sbin/rpc.lockd
BASENAME2=${DAEMON2##*.}
NEED_LOCKD=yes

# Load init script configuration
[ -f /etc/default/$INIT_NAME ] && . /etc/default/$INIT_NAME

# Source the init script functions
. /etc/init.d/init-functions

# Verify daemons are installed
[ "$1" = "status" ] && NFOUND=4 || NFOUND=5
test -x $DAEMON1 || exit $NFOUND
test -x $DAEMON2 || [ "$NEED_LOCKD" = no ] || exit $NFOUND

if test -f /proc/ksyms
then
    # We need to be conservative and run lockd,
    # unless we can prove that it isn't required.
	    grep -q lockdctl /proc/ksyms || NEED_LOCKD=no
fi

# Each init script action is defined below...

start() {
	local RET ERROR=

	log_status_msg "Starting $DESC: " -n
	log_status_msg "$BASENAME1" -n
	start_daemon $DAEMON1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg " " -n
	else
		log_failure_msg " failed ($RET: $ERROR)."
		return 1
	fi
	if [ "$NEED_LOCKD" = yes ]
	then
		log_status_msg "$BASENAME2" -n
		start_daemon $DAEMON2
		RET=$?
		if [ $RET -eq 0 ]; then
			log_success_msg ". "
		else
			log_failure_msg " failed ($RET: $ERROR)."
			return 1
	fi
	fi
	log_status_msg ""
	return 0
}

stop () {
	local RET ERROR=

	log_status_msg "Stopping $DESC: " -n
	if [ "$NEED_LOCKD" = yes ]
	then
		log_status_msg "$BASENAME2" -n
		killproc $DAEMON2
		RET=$?
		if [ $RET -eq 0 ]; then
			log_success_msg " " -n
		else
			log_failure_msg "failed ($RET: $ERROR). " -n
			return 1
		fi
	fi	
	log_status_msg "$BASENAME1" -n
	killproc $DAEMON1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg ". "
	else
		log_failure_msg "failed ($RET: $ERROR). " 
		return 1
	fi

	log_status_msg ""
	return 0
}

restart() {
	local RET

	log_status_msg "Restarting $DESC..."
	stop
	sleep 1
	start
	RET=$?

	return $RET
}

tryrestart() {
	local RET

	pidstatus $BASENAME
	RET=$?
	if [ $RET -eq 0 ]; then
		restart
		RET=$?
	else
		RET=7
	fi

	return $RET
}

#
# if the service does not support reload return code 3 should
# be the result...
#
reload() {
	local RET

	log_status_msg "Reloading $DESC configuration..." -n
	# killproc $BASENAME -HUP
	#
	# repeat as necessary...
	#
	log_success_msg "done."

	return 0
}

forcereload() {
	local RET

	reload
	RET=$?
	if [ $RET -ne 0 ]; then
		restart
		RET=$?
	fi
	
	return $RET
}

status() {
	local RET
	
	printstatus $BASENAME
	RET=$?

	return $RET
}

#
# Everything after this should be the same for all init scripts
#
# See the policy manual for information on actions and return codes.
#

parse() {
	case "$1" in
		start)
			start
			return $?
			;;
		stop)
			stop
			return $?
			;;
		restart|force-reload)
			restart
			return $?
			;;
		try-restart)
			tryrestart
			return $?
			;;
		reload)
			reload
			return $?
			;;
		status)
			status
			return $?
			;;
  *)
			echo "Usage: $INIT_NAME " \
			"{start|stop|restart|try-restart|reload|" \
			"force-reload|status}" >&2
	;;
	esac
	
	return 1
}

parse $@

