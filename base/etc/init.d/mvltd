#!/bin/sh
# Name: mvltd
# Date: 2005-02-02 13:09
# Author: MontaVista Software, Inc. <source@mvista.com>
# Copyright: Copyright 1999-2005 MontaVista Software, Inc.
# License: 2003 (c) MontaVista Software, Inc. This file is licensed
#          under the terms of the GNU General Public License version 2.
#          This program is licensed "as is" without any warranty of any
#          kind, whether express or implied.
#  
### BEGIN INIT INFO
# Required-Start: networking portmap
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: MontaVista Linux target tools daemon 
# Description: 
### END INIT INFO 
# chkconfig: 2345 90 10

# Init script information
INIT_NAME=mvltd
DESC="MontaVista target tools daemon"

# Individual Daemon information
DAEMON1=/usr/bin/mvltd
BASENAME1=${DAEMON1##*/}

# Load init script configuration
[ -f /etc/default/$INIT_NAME ] && . /etc/default/$INIT_NAME

# Source the init script functions
. /etc/init.d/init-functions

# Command line parameters
ARGS1="-p $MVLTD_PORT -b $MVLTD_TOOLSDIR -M $MVLTD_MAXTHREADS"

# Verify daemons are installed
[ "$1" = "status" ] && NFOUND=4 || NFOUND=5
test -f $DAEMON1 || exit $NFOUND

#log_status_msg "You must customize /etc/init.d/ntpdate before ntpdate can be run."
#exit 0


start() {
	local RET ERROR=

	log_status_msg "Starting $DESC: " -n
	log_status_msg "$BASENAME1" -n
	start_daemon $DAEMON1 $ARGS1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg ". " -n
	else
		log_failure_msg " failed ($RET: $ERROR)."
		return 1
	fi
	
	log_status_msg ""
	return 0
}

stop () {
	local RET ERROR=

	log_status_msg "Stopping $DESC: " -n
	log_status_msg "$BASENAME1" -n
	killproc $BASENAME1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg ". " -n
	else
		log_failure_msg "failed ($RET: $ERROR). " -n
		return 1
	fi

	# repeat above for each daemon...

	log_status_msg ""
	return 0
 }
 
restart() {
	local RET

	log_status_msg "Restarting $DESC..."
	stop
	start
	RET=$?

	return $RET
 }
 
tryrestart() {
	local RET

	pidstatus $BASENAME1
	RET=$?
	if [ $RET -eq 0 ]; then
		restart
		RET=$?
	else
		RET=7
	fi

	return $RET
}

#
# if the service does not support reload return code 3 should
# be the result...
#
reload() {
	local RET

	log_status_msg "Reloading $DESC configuration..." -n
	# killproc $BASENAME1 -HUP
	#
	# repeat as necessary...
	#
	log_success_msg "done."

	return 0
}
 
forcereload() {
	local RET

	reload
	RET=$?
	if [ $RET -ne 0 ]; then
		restart
		RET=$?
	fi
	
	return $RET
}

status() {
	local RET
	
	printstatus $BASENAME1
	RET=$?

	return $RET
}

#
# Everything after this should be the same for all init scripts
#
# See the policy manual for information on actions and return codes.
#

parse() {
	case "$1" in
	start)
		start
		return $?
		;;
	stop)
		stop
		return $?
		;;
	restart)
		restart
			return $?
			;;
		force-reload)
			force-reload
			return $?
		;;
	status)
		status
		return $?
		;;
	*)
		echo "Usage: $INIT_NAME " \
		"{start|stop|restart|force-reload|status}" >&2
  		;;
	esac
	
	return 1
}

parse $@

