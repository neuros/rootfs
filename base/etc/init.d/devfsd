#! /bin/sh
#
# Name: devfsd 
# Date: 2003-06-24 16:20
# Author: MontaVista Software, Inc. <source@mvista.com>
# Copyright: Copyright 1999-2003 MontaVista Software, Inc.
# License: 2003 (c) MontaVista Software, Inc. This file is licensed
#          under the terms of the GNU General Public License version 2.
#          This program is licensed "as is" without any warranty of any
#          kind, whether express or implied.
# 
# Copyright 2002, 2003, 2004 Sony Corporation
# Copyright 2002, 2003, 2004 Matsushita Electric Industrial Co., Ltd.
#
### BEGIN INIT INFO
# Required-Start: 
# Required-Stop:
# Should-Start:
# Should-Stop:
# Default-Start: S
# Default-Stop: 0 1 2 3 4 5 6
# Short-Description: 
# Description: This script handles the devfs startup, so that
#              permissions are set correctly and device symlink
#              are available.
### END INIT INFO 
# chkconfig: S 36 00

# Init script information
INIT_NAME=devfsd
DESC="devfsd daemon"

# Individual Daemon information
DAEMON1=/sbin/devfsd
ARGS1="/dev/"
BASENAME1=${DAEMON1##*/}
FILE1=/dev/.devfsd

# Load init script configuration
[ -f /etc/default/$INIT_NAME ] && . /etc/default/$INIT_NAME

# Source the init script functions
. /etc/init.d/init-functions

# Verify daemons are installed
[ "$1" = "status" ] && NFOUND=4 || NFOUND=5
test -x $DAEMON1 || exit $NFOUND
test -e $FILE1 || exit $NFOUND

if [ -f /etc/devfs/symlinks.list ]; then
  LINKFILES=`grep -v ^# /etc/devfs/symlinks.list 2>/dev/null`
fi
if [ -f /etc/devfs/devices.list ]; then
  DEVFILES=`grep -v ^# /etc/devfs/devices.list 2>/dev/null`
fi

start() {
	local RET ERROR=

	## set up symlinks
	cd /dev
        if [ "$LINKFILES" != "" ]; then
                log_status_msg ""
                log_status_msg "/etc/devfs/symlinks and /etc/devfs/symlinks.d/* use is deprecated."
                log_status_msg "It will be removed in a future version."
                log_status_msg "See devfsd(8) for how to achieve the same objectives more effectively"
                log_status_msg "through /etc/devfs/devfsd.conf, or ask russell@coker.com.au for advice."
                log_status_msg ""
                log_status_msg "Setting up symlinks in /dev..." -n
                OLDIFS="$IFS"
                IFS='\
'
                for i in `sed -e '/^#/d' $LINKFILES 2>/dev/null`; do
                        IFS="$OLDIFS"
                        eval set -- $i
                        [ -e $2 ] && continue
                        ln -sf $1 $2
                done
                log_status_msg "done."
        fi
	if [ "$DEVFILES" != "" ]; then
        	log_status_msg "Creating extra device nodes..." -n
        	OLDIFS="$IFS"
        	IFS='\
'
        	for i in `sed -e '/^#/d' $DEVFILES 2>/dev/null`; do
                	IFS="$OLDIFS"
                	eval set -- $i
                	[ -e $1 ] && continue
                	mknod $1 $2 $3 $4
                	if [ "$5.$6" != "." ]; then
                        	chown $5.$6 $1
                	fi
                	if [ "$7" != "" ]; then
                        	chmod $7 $1
                	fi
        	done
        	log_status_msg "done.  "
	fi

	log_status_msg "Starting $DESC: " -n
	log_status_msg "$BASENAME1" -n
	start_daemon $DAEMON1 $ARGS1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg "" -n
	else
		log_failure_msg " failed ($RET: $ERROR)."
		return 1
	fi
	
	log_status_msg ""
	return 0
}

stop () {
	local RET ERROR=

        cd /dev
        if [ "$LINKFILES" != "" ]; then
                echo -n "  Removing symlinks..."
                OLDIFS="$IFS"
                IFS='\
'
                for i in `sed -e '/^#/d' $LINKFILES 2>/dev/null`; do
                        IFS="$OLDIFS"
                        eval set -- $i
                        [ ! -L $2 ] && continue
                        rm $2
                done
                echo "done."
	fi
	echo ""

	log_status_msg "Stopping $DESC: " -n
	log_status_msg "$BASENAME1" -n
	killproc $BASENAME1
	RET=$?
	if [ $RET -eq 0 ]; then
		log_success_msg ". " 
	else
		log_failure_msg "failed ($RET: $ERROR). " -n
		return 1
	fi
	cd /dev
        if [ "$LINKFILES" != "" ]; then
                log_status_msg "  Removing symlinks..." -n
                OLDIFS="$IFS"
                IFS='\
'
                for i in `sed -e '/^#/d' $LINKFILES 2>/dev/null`; do
                        IFS="$OLDIFS"
                        eval set -- $i
                        [ ! -L $2 ] && continue
                        rm $2
                done
                log_status_msg "done."
        fi

	log_status_msg ""
	return 0
}

restart() {
	local RET

	log_status_msg "Restarting $DESC..."
	stop
	sleep 1
	start
	RET=$?

	return $RET
}

tryrestart() {
	local RET

	pidstatus $BASENAME1
	RET=$?
	if [ $RET -eq 0 ]; then
		restart
		RET=$?
	else
		RET=7
	fi

	return $RET
}

#
# if the service does not support reload return code 3 should
# be the result...
#
reload() {
	local RET

	log_status_msg "Reloading $DESC configuration..." -n
	# killproc $BASENAME1 -HUP
	#
	# repeat as necessary...
	#
	log_success_msg "done."

	return 0
}

status() {
	local RET
	
	printstatus $BASENAME1
	RET=$?

	return $RET
}

#
# Everything after this should be the same for all init scripts
#
# See the policy manual for information on actions and return codes.
#

parse() {
	case "$1" in
		start)
			start
			return $?
			;;
		stop)
			stop
			return $?
			;;
		restart | force-reload)
			restart
			return $?
			;;
		try-restart)
			tryrestart
			return $?
			;;
		status)
			start
			return $?
	;;
  *)
			echo "Usage: $INIT_NAME " \
			"{start|stop|restart|try-restart|" \
			"force-reload|status}" >&2
	;;
	esac
	
	return 1
}

parse $@

